// Mocks generated by Mockito 5.0.9 from annotations
// in nomoca_flutter/test/presentation/family_user_integration_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:nomoca_flutter/data/entity/remote/patient_card_entity.dart'
    as _i9;
import 'package:nomoca_flutter/data/entity/remote/user_nickname_entity.dart'
    as _i2;
import 'package:nomoca_flutter/data/repository/create_family_user_repository.dart'
    as _i3;
import 'package:nomoca_flutter/data/repository/delete_family_user_repository.dart'
    as _i6;
import 'package:nomoca_flutter/data/repository/fetch_family_user_list_repository.dart'
    as _i7;
import 'package:nomoca_flutter/data/repository/patient_card_repository.dart'
    as _i8;
import 'package:nomoca_flutter/data/repository/update_family_user_repository.dart'
    as _i5;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeUserNicknameEntity extends _i1.Fake
    implements _i2.UserNicknameEntity {}

/// A class which mocks [CreateFamilyUserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateFamilyUserRepository extends _i1.Mock
    implements _i3.CreateFamilyUserRepository {
  MockCreateFamilyUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.UserNicknameEntity> createUser({String? nickname}) => (super
      .noSuchMethod(Invocation.method(#createUser, [], {#nickname: nickname}),
          returnValue: Future<_i2.UserNicknameEntity>.value(
              _FakeUserNicknameEntity())) as _i4
      .Future<_i2.UserNicknameEntity>);
}

/// A class which mocks [UpdateFamilyUserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateFamilyUserRepository extends _i1.Mock
    implements _i5.UpdateFamilyUserRepository {
  MockUpdateFamilyUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.UserNicknameEntity> updateUser(
          {int? familyUserId, String? nickname}) =>
      (super.noSuchMethod(
              Invocation.method(#updateUser, [],
                  {#familyUserId: familyUserId, #nickname: nickname}),
              returnValue: Future<_i2.UserNicknameEntity>.value(
                  _FakeUserNicknameEntity()))
          as _i4.Future<_i2.UserNicknameEntity>);
}

/// A class which mocks [DeleteFamilyUserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteFamilyUserRepository extends _i1.Mock
    implements _i6.DeleteFamilyUserRepository {
  MockDeleteFamilyUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> deleteUser({int? familyUserId}) => (super.noSuchMethod(
      Invocation.method(#deleteUser, [], {#familyUserId: familyUserId}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future.value()) as _i4.Future<void>);
}

/// A class which mocks [FetchFamilyUserListRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchFamilyUserListRepository extends _i1.Mock
    implements _i7.FetchFamilyUserListRepository {
  MockFetchFamilyUserListRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.UserNicknameEntity>> fetchList() =>
      (super.noSuchMethod(Invocation.method(#fetchList, []),
              returnValue: Future<List<_i2.UserNicknameEntity>>.value(
                  <_i2.UserNicknameEntity>[]))
          as _i4.Future<List<_i2.UserNicknameEntity>>);
}

/// A class which mocks [PatientCardRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPatientCardRepository extends _i1.Mock
    implements _i8.PatientCardRepository {
  MockPatientCardRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i9.PatientCardEntity>> fetchList() =>
      (super.noSuchMethod(Invocation.method(#fetchList, []),
              returnValue: Future<List<_i9.PatientCardEntity>>.value(
                  <_i9.PatientCardEntity>[]))
          as _i4.Future<List<_i9.PatientCardEntity>>);
}
